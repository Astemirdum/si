i8* malloc(i64 size);
i8 free(i8* ptr);
i64 printf(i8 *fmt, ...);
i64 scanf(i8 *fmt, ...);

i64 swap(i64 *xp, i64 *yp) {
    i64 temp = *xp;
    *xp = *yp;
    *yp = temp;

    return 0;
}

i64 bubbleSort(i64* arr, i64 n) {
   i64 i;
   i64 j;

   for (i = 0; i < n; i++;) {
       for (j = 0; j < n-i-1; j++;){
           if (arr[j] > arr[j+1])
              swap(&arr[j], &arr[j+1]);
       }
   }
   return 0;
}

i64 printArray(i64* arr, i64 size) {
   i64 i = 0;
   while (i < size) {
       printf("%d ", arr[i]);
       i++;
   }
   printf("\n");
   return 0;
}

i64 main() {
    i64 n = 6; //sizeof(arr)/sizeof(arr[0]);
    i64* arr = (i64*)malloc(sizeof(i64) * n);
    arr[0] = 64;
    arr[1] = 32;
    arr[2] = 100;
    arr[3] = 0;
    arr[4] = -1;
    arr[5] = -1;

	printf("Unsorted array: \n");
	printArray(arr, n);

	bubbleSort(arr, n);
    printf("Sorted array: \n");
    printArray(arr, n);

    return 0;
}