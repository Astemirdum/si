run:
  go: "1.22"
  timeout: 10m
  issues-exit-code: 1
  tests: true
  allow-parallel-runners: true

output:
  formats: [] # colored-line-number
  print-issued-lines: true
  print-linter-name: true
  uniq-by-line: true
  sort-results: true

linters-settings:
  dupl:
    threshold: 150
  errcheck:
    check-type-assertions: true
    check-blank: true
  forbidigo:
    forbid:
      - '^fmt\.Print'
      - '^print$'
      - '^println$'
      - '^panic$'
  errorlint:
    errorf: true
    asserts: true
    comparison: true
  funlen:
    lines: 100
    statements: 60
  gocognit:
    min-complexity: 30
  goconst:
    min-len: 3
    min-occurrences: 3
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - commentedOutCode
      - whyNoLint
    settings:
      hugeParam:
        sizeThreshold: 80
      rangeExprCopy:
        sizeThreshold: 512
      rangeValCopy:
        sizeThreshold: 128
  gocyclo:
    min-complexity: 20
  godot:
    scope: declarations
    capital: false
  gofmt:
    simplify: true
  govet:
    enable-all: true
#    shadow: true
    disable:
      - fieldalignment
  importas:
    alias: []
    no-unaliased: true
  lll:
    line-length: 120
    tab-width: 1
  misspell:
    locale: US
    ignore-words:
      - cancelled
      - cancelling
  nakedret:
    max-func-lines: 30
  nestif:
    min-complexity: 25
  prealloc:
    simple: true
    range-loops: true
    for-loops: true
  testpackage:
    skip-regexp: '.*(export)_test\.go'
  whitespace:
    multi-if: true
    multi-func: true

linters:
  #  disable:
  #    - typecheck
  fast: false
  enable:
    - sqlclosecheck # Checks that sql.Rows and sql.Stmt are closed.
    - promlinter # Check Prometheus metrics naming via promlint
    - testpackage # Linter that makes you use a separate _test package
    - asciicheck # Simple linter to check that your code does not contain non-ASCII identifiers
    - bodyclose # checks whether HTTP response body is closed successfully
    - unused
    #- deadcode # Finds unused code
    #    - depguard # Go linter that checks if package imports are in a list of acceptable packages
    - dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    - durationcheck # check for two durations multiplied together
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    #    - errorlint # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - exportloopref # checks for pointers to enclosing loop variables
    #    - gocritic # Provides many diagnostics that check for bugs, performance and style issues.
#    - gocyclo # Computes and checks the cyclomatic complexity of functions
    - godot # Check if comments end in a period
    - gofmt # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - goimports # Goimports does everything that gofmt does. Additionally it checks unused imports
    - goprintffuncname # Checks that printf-like functions are named with `f` at the end
    - gosec # Inspects source code for security problems
    - gosimple # Linter for Go source code that specializes in simplifying a code
    - govet # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    #- ifshort # Checks that your code uses short syntax for if-statements whenever possible
    - importas # Enforces consistent import aliases
    - ineffassign # Detects when assignments to existing variables are not used
    - makezero # Finds slice declarations with non-zero initial length
    - misspell # Finds commonly misspelled English words in comments
    - nakedret # Finds naked returns in functions greater than a specified function length
    - nestif # Reports deeply nested if statements
    - nilerr # Finds the code that returns nil even if it checks that the error is not nil.
    #- nlreturn # nlreturn checks for a new line before return and branch statements to increase code clarity
    - noctx # noctx finds sending http request without context.Context
    - nolintlint # Reports ill-formed or insufficient nolint directives
    #    - paralleltest # paralleltest detects missing usage of t.Parallel() method in your Go test
    - prealloc # Finds slice declarations that could potentially be preallocated
    - predeclared # find code that shadows one of Go's predeclared identifiers
    - rowserrcheck # checks whether Err of rows is checked successfully
    - staticcheck # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    #    - structcheck # Finds unused struct fields
    #    - stylecheck # Stylecheck is a replacement for golint
    # - tagliatelle # Checks the struct tags.
    - thelper # thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code
    - unconvert # Remove unnecessary type conversions
    # - unparam # Reports unused function parameters
    - unused # Checks Go code for unused constants, variables, functions and types
    #- varcheck # Finds unused global variables and constants
    - wastedassign # wastedassign finds wasted assignment statements.
    #- whitespace # Tool for detection of leading and trailing whitespace

issues:
  max-issues-per-linter: 0
  max-same-issues: 0
  exclude-use-default: true
  exclude-rules:
    - path: _test\.go
      linters:
        - cyclop
        - dupl
        - errcheck
        - funlen
        - gocognit
        - goconst
        - gocritic
        - gocyclo
        - gosec
        - thelper
        - wrapcheck
    - path: "(.*)?_example_test.go"
      linters:
        - gocritic
    - text: 'shadow: declaration of "(err|ok)"'
      linters:
        - govet
  exclude:
    - .*Api.* should be .*API.*